resources:
  repositories:
  - repository: e2etest # The name used to reference this repository in the checkout step
    type: github
    endpoint: jaysonmc
    name: jaysonmc/temp-ocio-powerplatform-bdd-tests
    ref: test-e2e

trigger:
- test-e2e

jobs:
  - job: e2etests
    timeoutInMinutes: 120
    pool:
        vmImage: 'ubuntu-latest'
    container:
        image: mcr.microsoft.com/playwright:focal 

    steps:
        - checkout: e2etest     
        - task: Npm@1
          inputs:
            command: 'install'
          displayName: 'installing dependencies'

        - task: CmdLine@2  # using CmdLine instead of Npm because npm buffers the entire output
          displayName: 'Running e2e tests'
          continueOnError: true
          env: { HAIBUN_ENVC: HAIBUN_ENVC, HAIBUN_O_WEBPLAYWRIGHT_CAPTURE_VIDEO: HAIBUN_O_PLAYWRIGHT_CAPTURE_VIDEO, HAIBUN_O_WEBPLAYWRIGHT_STEP_CAPTURE_SCREENSHOT: HAIBUN_O_PLAYWRIGHT_STEP_CAPTURE_SCREENSHOT}
          inputs:
            script: |
              npm run test-pipeline
              ls -lat

  - job: publish_e2e_artifacts
    dependsOn: e2etests
    steps:
      - publish: '$(System.DefaultWorkingDirectory)'
        artifact: e2e_capture
        displayName: Publish e2e artifact            

  - job: exit_if_failed
    dependsOn: publish_e2e_artifacts
    condition: eq(dependencies.e2etests.result,'Succeeded')
    steps:
      - script: echo e2e tests passed, continuing.

  - job: storage_Account
    dependsOn: exit_if_failed
    condition: eq(dependencies.e2etests.result,'Succeeded')
    steps:
      # Download the artifacts
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'e2e_capture'
          downloadPath: '$(Build.ArtifactStagingDirectory)'

    # Upload to Storage Account
      - task: AzureCLI@2
        displayName: 'Upload files'
        inputs:
          azureSubscription: 'ocio-gcr2wp-testing-tools'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $StorageAccountName="stgcr2wptestresultreview"
            $StorageAccountKey=""
            # create path for the file
            $foldername= "e2e-reviews"      
            $ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName ` -StorageAccountKey $StorageAccountKey  
            $s = New-AzureStorageShare $filesharename –Context $ctx # to create new file share
            $localFileDirectory = "$env:BUILD_ARTIFACTSTAGGINGDIRECTORY"
            $files = Get-ChildItem -Path $localFileDirectory -Recurse -File  
            foreach($file in $files)  
            {  
                $localFile = $localFileDirectory+$file  
                Set-AzureStorageFileContent –Share $s –Source $localFile  
            }  
              # if you don’t want them in the root folder of the share, but in a subfolder?  
            New-AzureStorageDirectory –Share $s –Path $foldername
            foreach($file in $files)  
            {  
                $localFile = $localFileDirectory+$file  
                Set-AzureStorageFileContent –Share $s –Source $localFile –Path $foldername  
            }  
